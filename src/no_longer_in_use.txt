// void			superimpose(t_colony *colony, t_path *path, int pivoting)
// {
// 	t_node_stack_item	*current_node;
// 	t_node_stack_item	*next_node;

// 	current_node = path->route->tail;
// 	while (current_node != path->route->head)
// 	{
// 		if (current_node->node->class == finish)
// 			return ;
// 		next_node = current_node->left;
// 		if (!next_node->node->flow || next_node->node->flow->number_of_items == 0)
// 			connect_flow(current_node, next_node);
// 		else if (next_node->node->flow->tail->node == current_node->node)
// 			process_edge(current_node, next_node);
// 		else if (next_node->node->flow->number_of_items != 0 && pivoting)
// 		{
// 			connect_flow(current_node, next_node);
// 			if (!next_node->left->node->flow || !find_the_right_edge(next_node->left->node->flow, next_node->node))
// 			{
// 				do_stuff(colony, next_node);
// 				process_pivots(colony, next_node);
// 				return ;
// 			}
// 		}
// 		else
// 			connect_flow(current_node, next_node);
// 		current_node = current_node->left;
// 	}
// }

// int			check_path_overlap(t_path *path_one, t_path *path_two)
// {
// 	t_node_stack_item *current_item_one;
// 	t_node_stack_item *current_item_two;

// 	if (path_one == path_two)
// 		return (0);
// 	if (path_one->length < 3 || path_two->length < 3)
// 		return (0);
// 	current_item_one = path_one->route->tail->left;
// 	while (current_item_one != path_one->route->head)
// 	{
// 		current_item_two = path_two->route->tail->left;
// 		while (current_item_two != path_two->route->head)
// 		{
// 			if (current_item_one->node == current_item_two->node)
// 			{
// 				return (1);
// 			}
// 			current_item_two = current_item_two->left;
// 		}
// 		current_item_one = current_item_one->left;
// 	}
// 	return (0);
// }

// void		compute_path_overlap(t_path_list *paths, t_path *path)
// {
// 	t_path_list *current_path;

// 	current_path = paths;
// 	while (current_path != NULL)
// 	{
// 		if (check_path_overlap(current_path->path, path))
// 		{
// 			current_path->path->path_overlap = queue_path(current_path->path->path_overlap, path);
// 			path->path_overlap = queue_path(path->path_overlap, current_path->path);
// 		}
// 		current_path = current_path->next;
// 	}
// }

// t_path_list *remove_path_from_list(t_path_list **path_list, t_path *path)
// {
// 	t_path_list *current_path;
// 	t_path_list *next_path;

// 	if (!*path_list || !path)
// 		return (NULL);
// 	if ((*path_list)->path == path)
// 	{
// 		current_path = (*path_list)->next;
// 		destroy_path(&(*path_list)->path); //do i need to keep the path?
// 		free(*path_list);
// 		*path_list = current_path;
// 		return (*path_list);
// 	}
// 	current_path = *path_list;
// 	while (current_path->next->path != path)
// 	{
// 		current_path = current_path->next;
// 		if (current_path == NULL)
// 			return (*path_list);
// 	}
// 	next_path = current_path->next->next;
// 	free(current_path->next);
// 	current_path->next = next_path;
// 	return (*path_list);
// }

// t_path_list *get_protected_paths(t_colony *colony)
// {
// 	t_path_list *current_path;
// 	t_generic_list *pivot_node;

// 	pivot_node = colony->pivot_nodes;
// 	while (pivot_node)
// 	{
// 		current_path = get_the_right_path((t_node *)pivot_node, colony->flow_paths);
// 		if (current_path)
// 		{
// 			colony->protected_paths = queue_path(colony->protected_paths, current_path->path);
// 		}
// 		pivot_node = pivot_node->next;
// 	}
// 	return (colony->protected_paths);
// }

// int			check_if_the_paths_are_identical(t_path *path1, t_path *path2)
// {
// 	t_node_stack_item	*current_node1;
// 	t_node_stack_item	*current_node2;
// 	int					n;

// 	n = 0;
// 	if (!path1 && !path2)
// 		return (1);
// 	if (!path1 || !path2)
// 		return (0);
// 	if (path1->length != path2->length)
// 		return (0);
// 	current_node1 = path1->route->tail;
// 	current_node2 = path2->route->tail;
// 	while (n < path1->length)
// 	{
// 		if (current_node1->node != current_node2->node)
// 			return (0);
// 		current_node1 = current_node1->left;
// 		current_node2 = current_node2->left;
// 		n = n + 1;
// 	}
// 	return (1);
// }

// t_path		*check_for_shortest_empty_path(t_path_list *paths)
// {
// 	t_path_list *current;
// 	t_path_list *minimum;

// 	current = paths;
// 	minimum = NULL;
// 	while (current != NULL)
// 	{
// 		if (current->path->number_of_ants == 0)
// 		{
// 			if (!minimum)
// 				minimum = current;
// 			else if (current->path->length <= minimum->path->length)
// 				minimum = current;
// 		}
// 		current = current->next;
// 	}
// 	return (minimum == NULL ? NULL : minimum->path);
// }

// int			count_ants_on_a_path(t_path *path)
// {
// 	t_node_stack_item *current_node;
// 	int number_of_ants;

// 	if (path->length < 3)
// 		return (0);
// 	current_node = path->route->tail->left;
// 	number_of_ants = current_node->node->ant ? 1 : 0;
// 	current_node = current_node->left;
// 	while (current_node != path->route->head)
// 	{
// 		if (current_node->node->ant)
// 			number_of_ants += 1;
// 		current_node = current_node->left;
// 	}
// 	return (number_of_ants);
// }

// t_path_list *get_non_jammed_path(t_path_list *paths)
// {
// 	t_path_list *current;

// 	current = paths;
// 	while (current != NULL)
// 	{
// 		if (current->path->jam_size == 0)
// 			return (current);
// 		current = current->next;
// 	}
// 	return (NULL);
// }

// int estimate_effective_path_length(t_path *path)
// {
// 	int effective_length;
// 	int jammed;
// 	int distance_to_the_jam;

// 	jammed = path->jam_size ? 1 : 0;
// 	if (path->path_overlap == NULL)
// 	{
// 		effective_length = path->length + path->queue_size + jammed;
// 		return (effective_length);
// 	}
// 	else
// 	{
// 		distance_to_the_jam = get_distance_to_the_jam(path);
// 		if (!jammed)
// 			effective_length = path->length + path->queue_size +
// 			(path->number_of_ants_across - path->number_of_ants - distance_to_the_jam); //this is wrong;
// 		else
// 			effective_length = path->length + path->queue_size + jammed +
// 			(path->number_of_ants_across - path->number_of_ants);
// 		effective_length = (effective_length >= 0 ? effective_length : 0);
// 		return (effective_length);
// 	}
// }

// t_path *get_cheapest_non_jammed_path(t_path_list *paths)
// {
// 	t_path_list *current;
// 	t_path_list *minimum;
// 	int min_effective_length;
// 	int current_effective_length;

// 	current = paths;
// 	minimum = NULL;
// 	current_effective_length = estimate_effective_path_length(current->path);
// 	min_effective_length = 0;
// 	while (current != NULL)
// 	{
// 		if (current->path->jam_size == 0)
// 		{
// 			if (!minimum)
// 			{
// 				minimum = current;
// 				min_effective_length = estimate_effective_path_length(minimum->path);
// 				current = current->next;
// 				continue ;
// 			}
// 			current_effective_length = estimate_effective_path_length(current->path);
// 			if (current_effective_length < min_effective_length)
// 			{
// 				minimum = current;
// 				min_effective_length = current_effective_length;
// 			}
// 		}
// 		current = current->next;
// 	}
// 	return (minimum == NULL ? NULL : minimum->path);
// }

// t_path *find_minimum_cost_path_mk2(t_path_list *paths) //this might be slow too;
// {
// 	t_path_list *minimum;
// 	t_path_list *current;

// 	minimum = get_non_jammed_path(paths);
// 	if (!minimum)
// 		return (NULL);
// 	minimum->path->number_of_ants_across = compute_number_of_ants_in_the_union(minimum->path);
// 	current = minimum->next;
// 	while (current != NULL)
// 	{
// 		current->path->jam_size = compute_jam_size(current->path);
// 		if (current->path->jam_size)
// 		{
// 			current = current->next;
// 			continue ;
// 		}
// 		current->path->number_of_ants_across = compute_number_of_ants_in_the_union(current->path);
// 		if ((current->path->number_of_ants_across + current->path->length) <= 
// 		(minimum->path->number_of_ants_across + minimum->path->length))
// 		{
// 			minimum = current;
// 		}
// 		current = current->next;
// 	}
// 	return (minimum->path);
// }

// t_path *find_minimum_cost_path(t_colony *colony) //this might be slow too;
// {
// 	t_path_list *minimum;
// 	t_path_list *current;
// 	int min_effective_length;
// 	int current_effective_length;

// 	if (!colony->paths)
// 		return (NULL);
// 	minimum = colony->paths;
// 	// minimum->path->number_of_ants_across = compute_number_of_ants_in_the_union(minimum->path);
// 	// minimum->path->jam_size = compute_jam_size(minimum->path);
// 	update_everything(minimum->path);
// 	minimum->path->number_of_ants_across = compute_the_number_of_unique_ants_in_the_union(minimum->path);
// 	unmark_all_ants(colony);
// 	min_effective_length = estimate_effective_path_length(minimum->path);
// 	current = colony->paths->next;
// 	while (current != NULL)
// 	{
// 		// current->path->jam_size = compute_jam_size(current->path);
// 		// current->path->number_of_ants_across = compute_number_of_ants_in_the_union(current->path);
// 		update_everything(current->path);
// 		current->path->number_of_ants_across = compute_the_number_of_unique_ants_in_the_union(current->path);
// 		unmark_all_ants(colony);
// 		current_effective_length = estimate_effective_path_length(current->path);
// 		if (current_effective_length <= min_effective_length)
// 		{
// 			minimum = current;
// 			min_effective_length = current_effective_length;
// 		}
// 		current = current->next;
// 	}
// 	return (minimum->path);
// }

// t_path *check_for_availible_path(t_colony *colony, t_ant *ant)
// {
// 	t_path_list *current;
// 	int pressure;
	
// 	// pressure = colony->start->number_of_ants - ant->number;
// 	// if (pressure < 0)
// 	//     pressure = -pressure;
// 	pressure = colony->start->number_of_ants;
// 	current = colony->paths;
// 	while (current != NULL)
// 	{
// 		if (current->path->jam_size)
// 		{
// 			current = current->next;
// 			continue;
// 		}
// 		if (current->path->length + current->path->number_of_ants_across <= pressure) //minimum length is not guaranteed;
// 			return (current->path);
// 		current = current->next;
// 	}
// 	return (NULL);
// }

// int check_for_a_traffic_jam(t_node *node)
// {
// 	t_node_stack_item *current_node;

// 	current_node = node->adjacent_nodes->tail;
// 	while (current_node != node->adjacent_nodes->head)
// 	{
// 		if (current_node->node->ant == NULL)
// 			return (0);
// 		current_node = current_node->left;
// 	}
// 	if (current_node->node->ant == NULL)
// 		return (0);
// 	return (1);
// }

// int compute_jam_size(t_path *path)
// {
// 	int jam_size;
// 	t_node_stack_item *current_node;

// 	jam_size = 0;
// 	current_node = path->route->tail->left;
// 	while (current_node != path->route->head)
// 	{
// 		if (current_node->node->ant)
// 			jam_size = jam_size + 1;
// 		else
// 			return (jam_size);
// 		current_node = current_node->left;
// 	}
// 	return (jam_size);
// }

// int compute_number_of_ants_in_the_union(t_path *path)
// {
// 	int number_of_ants;
// 	t_path_list *current_path;

// 	number_of_ants = path->number_of_ants;
// 	current_path = path->path_overlap;
// 	while (current_path != NULL)
// 	{
// 		number_of_ants = number_of_ants + current_path->path->number_of_ants;
// 		current_path = current_path->next;
// 	}
// 	return (number_of_ants);
// }

// void update_ant_couts(t_path_list *paths)
// {
// 	t_path_list *current_path;

// 	current_path = paths;
// 	while (current_path != NULL)
// 	{
// 		current_path->path->number_of_ants_across = compute_number_of_ants_in_the_union(current_path->path);
// 		current_path = current_path->next;
// 	}
// }

// void update_ant_couts_in_the_union(t_path_list *path_overlap)
// {
// 	t_path_list *current_path;

// 	current_path = path_overlap;
// 	while (current_path)
// 	{
// 		current_path->path->number_of_ants = count_ants_on_a_path(current_path->path);
// 		current_path = current_path->next;
// 	}
// }

// void update_jam_sizes_in_union(t_path_list *path_overlap)
// {
// 	t_path_list *current;

// 	current = path_overlap;
// 	while (current != NULL)
// 	{
// 		if (!current->path)
// 			return ;
// 		current->path->jam_size = compute_jam_size(current->path);
// 		current = current->next;
// 	}
// }

// void update_everything(t_path *path)
// {
// 	t_path_list *current_path;

// 	path->number_of_ants = count_ants_on_a_path(path);
// 	path->jam_size = compute_jam_size(path);
// 	current_path = path->path_overlap;
// 	while (current_path != NULL)
// 	{
// 		current_path->path->number_of_ants = count_ants_on_a_path(current_path->path);
// 		current_path->path->jam_size = compute_jam_size(current_path->path);
// 		current_path = current_path->next;
// 	}
// }

// void increment_union_ant_count(t_path *path, int amount)
// {
// 	t_path_list *current;

// 	current = path->path_overlap;
// 	path->number_of_ants_across += amount;
// 	while (current != NULL)
// 	{
// 		current->path->number_of_ants_across += amount;
// 		current = current->next;
// 	}
// }

// void reset_queues(t_path_list *paths)
// {
// 	t_path_list *current;

// 	current = paths;
// 	while (current != NULL)
// 	{
// 		current->path->queue_size = 0;
// 		current = current->next;
// 	}
// }

// char *display_path_debug(t_stack *route)
// {
//     t_node_stack_item *curent_node;
//     char *display_string = ft_strdup("");

//     curent_node = route->tail->left;
//     while (curent_node != route->tail)
//     {
//         display_string = ft_strjoin(display_string, curent_node->node->name);
//         display_string = ft_strjoin(display_string, " ");
//         curent_node = curent_node->left;
//     }
//     return (display_string);
// }

// void display_node(t_node *node)
// {
//     if (!node)
//     {
//         ft_printf("null node;\n");
//         return ;
//     }
//     ft_printf("node at: %p\n", node);
//     ft_printf("index = %d; name = %s;\n", node->index, node->name);
//     ft_printf("ant: %p;\n", node->ant);
//     ft_printf("--------------\n");
// }

// void display_node_stack_item(t_node_stack_item *node_stack_item)
// {
//     if (!node_stack_item)
//         return ;
//     display_node(node_stack_item->node);
// }

// void display_stack(t_node *node, t_stack *stack)
// {
//     t_node_stack_item *node_stack_item;

//     if (!stack || stack->number_of_items == 0)
//     {
//         ft_printf("null stack;\n");
//         return ;
//     }
//     node_stack_item = stack->tail;
//     if (node)
//         ft_printf("current node index = %d; ", node->index);
//     ft_printf("%s", "[ ");
//     while (node_stack_item != stack->head)
//     {
//         ft_printf("(%d, %s) ", node_stack_item->node->index, node_stack_item->node->name);
//         node_stack_item = node_stack_item->left;
//     }
//     ft_printf("(%d, %s) ", node_stack_item->node->index, node_stack_item->node->name);
//     ft_printf("%s", "]\n");
//     ft_printf("number of items = %d;\n", stack->number_of_items);
// }

// void    display_ant(t_ant *ant)
// {
//     ft_printf("ant %p; at node %d;\n", ant, ant->current_node->index);
//     display_stack(NULL, ant->path->route);
// }

// void	print_stack_backwards(t_stack *stack)
// {
// 	t_node_stack_item *current;

// 	if (!stack)
// 	{
// 		ft_printf("null stack;\n");
// 		return ;
// 	}
// 	if (!stack->head && !stack->tail)
// 	{
// 		ft_printf("head: null; tail: null;\n");
// 		return ;
// 	}
// 	if (stack->head == stack->tail)
// 	{
// 		ft_printf("%d HEAD\n", stack->head->node->index);
// 		return ;
// 	}
// 	current = stack->tail;
// 	while (current != stack->head)
// 	{
// 		ft_printf("%d ", current->node->index);
// 		current = current->left;
// 	}
// 	ft_printf("%d HEAD", current->node->index);
// 	ft_printf("\n");
// }

// void display_colony(t_colony *colony)
// {
//     int n = 0;
//     while (n < colony->number_of_ants)
//     {
//         display_ant(colony->ants[n]);
//         n = n + 1;
//     }
// }

// t_big_string *new_big_string(void)
// {
// 	t_big_string *big_string;

// 	big_string = mallokill(sizeof(struct s_big_string));
// 	big_string->string = ft_strnew(BIG_STRING_CAPACITY);
// 	if (!big_string->string)
// 		exit(1);
// 	big_string->current_index = 0;
// 	big_string->total_capacity = BIG_STRING_CAPACITY;
// 	return (big_string);
// }

// int			append_string(t_big_string *big_string, char *new_string)
// {
// 	int n;

// 	if ((int)ft_strlen(new_string) + big_string->current_index >= BIG_STRING_CAPACITY)
// 		return (0);
// 	n = 0;
// 	while (new_string[n] != '\0')
// 	{
// 		big_string->string[big_string->current_index + n] = new_string[n];
// 		n = n + 1;
// 	}
// 	big_string->current_index = big_string->current_index + n;
// 	return (1);
// }

// void		print_and_destroy(t_big_string **big_string)
// {
// 	write(1, (*big_string)->string, (*big_string)->current_index);
// 	free((*big_string)->string);
// 	free(*big_string);
// 	*big_string = NULL;
// }